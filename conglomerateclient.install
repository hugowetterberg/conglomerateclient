<?php
// $Id$

function conglomerateclient_install() {
  drupal_install_schema('conglomerateclient');
}

function conglomerateclient_uninstall() {
  drupal_uninstall_schema('conglomerateclient');
}

function conglomerateclient_schema() {
  $schema = array();

  $schema['conglomerateclient_server']  = array(
    'description' => t('Stores information about conglomerate servers'),
    'fields' => array(
      'sid' => array(
        'description' => t('The primary identifier for a server.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => t('The name to display for the server'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'url' => array(
        'description' => t('A url to the server'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'endpoint' => array(
        'description' => t('The api endpoint for the server'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'login_oauth_consumer' => array(
        'description' => t('The OAuth consumer to use when logging in users'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE,
      ),
      'oauth_consumer' => array(
        'description' => t('The OAuth consumer to use when communicating with the server'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE,
      ),
      'oauth_token_key' => array(
        'description' => t('The OAuth token to use when communicating with the server'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE,
      ),
    ),
    'primary key' => array('sid'),
  );

  $schema['conglomerateclient_queue'] = array(
    'description' => t('Stores a operation queue for the client'),
    'fields' => array(
      'id' => array(
        'description' => t('The primary identifier for a queue item.'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'sid' => array(
        'description' => t('The primary identifier for the target site.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => t('The primary identifier for a node.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'added' => array(
        'description' => t('The Unix timestamp when the item was added.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'operation' => array(
        'description' => t('The synchronization operation'),
        'type'        => 'varchar',
        'length'      => 10,
        'not null'    => TRUE,
        'default'     => 'create',
      ),
      'data' => array(
        'description' => t('The serialized data that should be sent to the server'),
        'type' => 'text',
        'serialize' => TRUE,
      ),
      'fail_count' => array(
        'description' => t('The number of times the operation has failed.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'site' => array('sid'),
      'node' => array('nid'),
      'exec_order' => array('sid', 'nid', 'added'),
    ),
  );

  $schema['conglomerateclient_node_dirty'] = array(
    'description' => t('Stores the dirty state for nodes'),
    'fields' => array(
      'nid' => array(
        'description' => t('The primary identifier for a node.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
  );

  $schema['conglomerateclient_sync_info'] = array(
    'description' => t('Stores synchronization state for nodes'),
    'fields' => array(
      'sid' => array(
        'description' => t('The primary identifier for a server.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => t('The primary identifier for a node.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'eid' => array(
        'description' => t('The external identifier for the node on the server.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'in_progress' => array(
        'description' => t('Whether the node is currently being synchronized.'),
        'type'        => 'int',
        'size'        => 'small',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'updated' => array(
        'description' => t('The Unix timestamp when the synchronization state was updated.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('sid', 'nid'),
    'indexes' => array(
      'node' => array('nid'),
    ),
  );

  $schema['conglomerate_users'] = array(
    'fields' => array(
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'euid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('uid'),
  );

  return $schema;
}

function conglomerateclient_update_6001() {
  $ret = array();

  db_add_field($ret, 'conglomerateclient_server', 'login_oauth_consumer', array(
    'description' => t('The OAuth consumer to use when logging in users'),
    'type'        => 'varchar',
    'length'      => 32,
    'not null'    => TRUE,
  ));

  return $ret;
}
