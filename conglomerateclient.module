<?php
// $Id$

define('CONGLOMERATE_CREATE', 'create');
define('CONGLOMERATE_UPDATE', 'update');
define('CONGLOMERATE_DELETE', 'delete');

define('CONGLOMERATE_TYPE_NONE', 'none');
define('CONGLOMERATE_TYPE_POST', 'news');
define('CONGLOMERATE_TYPE_EVENT', 'event');
define('CONGLOMERATE_TYPE_LOCATION', 'location');

/**
 * Implementation of hook_perm().
 */
function conglomerateclient_perm() {
  return array('administer conglomerate client');
}

/**
 * Implementation of hook_menu().
 */
function conglomerateclient_menu() {
  $menu = array();

  $menu['admin/settings/conglomerateclient'] = array(
    'title'   => 'Conglomerate client settings',
    'description' => 'Administer the settings for the conglomerate client',
    'file'  => 'includes/admin.inc',
    'page callback' => '_conglomerateclient_admin_index',
    'access arguments' => array('adminster conglomerate client'),
    'type'    => MENU_NORMAL_ITEM,
  );

  $menu['admin/settings/conglomerateclient/index'] = array(
    'title' => 'Conglomerate servers',
    'type'    => MENU_DEFAULT_LOCAL_TASK,
    'weight'  => -10,
  );

  $menu['admin/settings/conglomerateclient/add_server'] = array(
    'title' => 'Add server',
    'file'  => 'includes/admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_conglomerateclient_admin_add_server'),
    'access arguments' => array('adminster conglomerate client'),
    'type'    => MENU_LOCAL_TASK,
  );

  $menu['admin/settings/conglomerateclient/authorize/%'] = array(
    'file'  => 'includes/authorization.inc',
    'page callback' => '_conglomerateclient_authorize_for_server',
    'page arguments' => array(4),
    'access arguments' => array('adminster conglomerate client'),
    'type'    => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * Implementation of hook_theme().
 */
function conglomerateclient_theme($existing, $type, $theme, $path) {
  $themes = array();

  $themes['conglomerateclient_admin_index'] = array(
    'template' => 'conglomerateclient_admin_index',
    'path' => $path . '/templates',
    'arguments' => array(
      'servers' => array(),
      'messages' => array(),
    ),
  );

  return $themes;
}

/**
 * Implementation of hook_views_api().
 */
function conglomerateclient_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'conglomerateclient') . '/views',
  );
}

/**
 * Implementation of hook_oauth_common_authorized().
 */
function conglomerateclient_oauth_common_authorized($consumer_token, $access_token, $request_token) {
  if (user_access('adminster conglomerate client')) {
    $res = db_query("SELECT * FROM {conglomerateclient_server}
      WHERE oauth_consumer='%s'", array(
        ':oauth_consumer' => $consumer_token->key,
      ));
    $server = db_fetch_array($res);

    // If it we got a access token for one of our consumers
    if ($server) {
      // Update the server with the access token key and redirect to
      // the conglomerateclient index page.
      $server['oauth_token_key'] = $access_token->key;
      drupal_write_record('conglomerateclient_server', $server, array('sid'));
      drupal_goto('admin/settings/conglomerateclient/index');
    }
  }
}

/**
 * Gets the registered conglomerate servers on the system.
 *
 * @return array
 *  An array withe server information keyed by site id.
 */
function conglomerateclient_get_servers() {
  $servers = array();
  $res = db_query("SELECT * FROM {conglomerateclient_server}");
  while ($server = db_fetch_array($res)) {
    $servers[$server['sid']] = $server;
  }
  return $servers;
}

/**
 * Adds a conglomerate server
 *
 * @param string $name
 *  The name of the server.
 * @param string $url
 *  A url to the server. Typically to the front page.
 * @param string $endpoint
 *  The endpoint for the api on the server.
 * @param string $consumer_key
 *  The key for the consumer to use when communicating with the server.
 * @param string $access_key
 *  The key for the access token to use when communicating with the server.
 * @return int
 *  The id of the created server
 */
function conglomerateclient_add_server($name, $url, $endpoint, $consumer_key, $access_key) {
  $values = array(
    'name' => $name,
    'url' => $url,
    'endpoint' => $endpoint,
    'oauth_consumer' => $consumer_key,
    'oauth_token_key' => $access_key,
  );
  drupal_write_record('conglomerateclient_server', $values);
  return db_last_insert_id('conglomerateclient_server', 'sid');
}

/**
 * Updates a conglomerate server
 *
 * @param int $sid
 *  The id of the server to update.
 * @param string $name
 *  The name of the server.
 * @param string $url
 *  A url to the server. Typically to the front page.
 * @param string $endpoint
 *  The endpoint for the api on the server.
 * @param string $consumer_key
 *  The key for the consumer to use when communicating with the server.
 * @param string $access_key
 *  The key for the access token to use when communicating with the server.
 * @return void
 */
function conglomerateclient_update_server($sid, $name, $url, $endpoint, $consumer_key, $access_key) {
  $values = array(
    'sid' => $sid,
    'name' => $name,
    'url' => $url,
    'endpoint' => $endpoint,
    'oauth_consumer' => $consumer_key,
    'oauth_token_key' => $access_key,
  );
  drupal_write_record('conglomerateclient_server', $values, array('sid'));
}

/**
 * Get the node synchronization state for a node. You can get the state either
 * for a single or many conglomerate servers.
 *
 * @param string $nid
 *  The nid of the node to load state for.
 * @param int $sid
 *  Optional. The conglomerate site to load state for.
 * @return bool
 *  An array of synchronization states keyed after site id
 */
function conglomerateclient_get_node_sync_info($nid, $sid = 0) {
  $state = array();

  if (!$sid) { // Load state for all conglomerate servers
    $res = db_query("SELECT *
      FROM {conglomerateclient_sync_info}
      WHERE nid=%d", array(
        ':nid' => $nid,
    ));
    if ($r = db_fetch_array($res)) {
      $state[$r['sid']] = $r;
    }
  }
  else { // Load state for a specific conglomerate server
    $res = db_query("SELECT *
      FROM {conglomerateclient_sync_info}
      WHERE nid=%d AND sid=%d", array(
        ':nid' => $nid,
        ':sid' => $sid,
    ));
    if ($r = db_fetch_array($res)) {
      $state[$sid] = $r;
    }
  }

  return $state;
}

/**
 * Creates or updates the synchronization information for a node.
 *
 * @param string $nid
 *  The nid of the node to set the synchronization information for.
 * @param string $sid
 *  The site id of the synchronization information.
 * @param string $eid
 *  Optional. The nid of the node on the conglomerate site.
 * @return void
 */
function conglomerateclient_set_node_sync_info($nid, $sid, $eid = 0) {
  $rv = conglomerateclient_get_servers();
  $current = conglomerateclient_get_node_sync_info($node->nid, $sid);
  $update = empty($current) ? NULL : array('sid', 'nid');

  $state = array(
    'nid' => $nid,
    'sid' => $sid,
    'updated' => time(),
  );
  if ($eid) {
    $state['eid'] = $eid;
  }

  drupal_write_record('conglomerateclient_sync_info', $state, $update);
}

/**
 * Deletes synchronization information for a node.
 *
 * @param string $nid
 *  The nid of the node to remove the synchronization information for.
 * @param string $sid
 *  The site id of the synchronization information.
 * @return void
 */
function conglomerateclient_delete_node_sync_info($nid, $sid) {
  db_query("DELETE FROM {conglomerateclient_sync_info} WHERE nid=%d AND sid=%d", array(
      ':nid' => $nid,
      ':sid' => $sid,
    ));
}

/**
 * Implementation of hook_nodeapi().
 **/
function conglomerateclient_nodeapi(&$node, $op, $a3 = NULL, $page = NULL) {
  switch ($op) {
    case 'delete':
    case 'insert':
    case 'update': // TODO: Check that revision delete results in a update call
      // We just mark the node as dirty here. We can't be sure that all node
      // information has been saved. Therefore we can't execute the
      // aggregation selection views.
      conglomerateclient_mark_node_as_dirty($node->nid);
    break;
  }
}

/**
 * Implementation of hook_exit();
 */
function conglomerateclient_exit() {
  // Get the nodes that have been marked as dirty during this request
  $dirty = conglomerateclient_mark_node_as_dirty();
  if (!empty($dirty)) {
    $max_ad_hoc = variable_get('conglomerateclient_maximum_adhoc_updates', 3);
    if (count($dirty)>$max_ad_hoc) {
      $dirty = array_slice($dirty, 0, $max_ad_hoc);
    }
    conglomerateclient_process_nodes($dirty);
    conglomerateclient_sync_nodes($dirty);
  }
}

/**
 * Implementation of hook_cron().
 */
function conglomerateclient_cron() {
  $max_updates = variable_get('conglomerateclient_maximum_cron_updates', 20);
  $dirty = conglomerateclient_get_dirty_nodes($max_updates);
  conglomerateclient_process_nodes($dirty);
  conglomerateclient_sync_nodes();
}

/**
 * Marks a node as dirty.
 *
 * @param int $nid
 *  The nid of the node that should be queued.
 * @return array
 *  An array of nodes that have been marked as dirty during this request.
 */
function conglomerateclient_mark_node_as_dirty($nid = NULL) {
  global $db_type;
  static $queue;

  if (!$queue) {
    $queue = array();
  }

  if ($nid) {
    // Queue the node so that we can sync it on exit
    $queue[] = $nid;
    if ($db_type == 'mysql') {
      // We can do the insert in one statement if we're on mysql
      db_query("INSERT INTO {conglomerateclient_node_dirty} VALUES(%d)
        ON DUPLICATE KEY IGNORE", array(':nid' => $nid));
    }
    else {
      // Check if we need to do a insert before adding a dirty flag
      $exists = db_result(db_query("SELECT COUNT(nid)
        FROM {conglomerateclient_node_dirty} WHERE nid=%d",array(
          ':nid' => $nid,
        )));
      if (!$exists) {
        db_query("INSERT INTO {conglomerateclient_node_dirty} VALUES(%d)", array(':nid' => $nid));
      }
    }
  }

  return $queue;
}

function conglomerateclient_get_dirty_nodes($limit = 0) {
  if ($limit) {
    $res = db_query_range("SELECT nid FROM {conglomerateclient_node_dirty}", 0, $limit);
  }
  else {
    $res = db_query_range("SELECT nid FROM {conglomerateclient_node_dirty}");
  }

  $dirty = array();
  while ($nid = db_result($res)) {
    $dirty[] = $nid;
  }

  return $dirty;
}

/**
 * Processes nodes to check if updates should be sent to the servers.
 * Nodes that should be synchronized are appended to the work queue.
 *
 * @param array $nodes
 *  An array of nid:s for the nodes that should be updated.
 * @return void
 */
function conglomerateclient_process_nodes($nodes) {
  foreach ($nodes as $nid) {
    $sync = conglomerateclient_evaluate_node($nid);
    $status = conglomerateclient_get_node_sync_info($nid);

    // Queue updates and deletes
    foreach ($sync as $sid => $data) {
      if (isset($status[$sid])) {
        conglomerateclient_queue_operation($nid, $sid, 'update', $data);
      }
      else {
        conglomerateclient_set_node_sync_info($nid, $sid);
        conglomerateclient_queue_operation($nid, $sid, 'create', $data);
      }
    }
    // Queue deletes
    foreach ($status as $sid => $info) {
      if (!isset($sync[$sid])) {
        conglomerateclient_queue_operation($nid, $sid, 'delete', $info);
      }
    }
  }
  // Remove the dirty state for queued nodes
  if (!empty($nodes)) {
    $placeholders = db_placeholders($nodes);
    db_query("DELETE FROM {conglomerateclient_node_dirty}
      WHERE nid IN({$placeholders})", $nodes);
  }
}

/**
 * Adds a synchronization operation to the queue.
 *
 * @param int $nid
 * @param int $sid
 * @param string $operation
 * @param mixed $data
 * @return void
 */
function conglomerateclient_queue_operation($nid, $sid, $operation, $data) {
  $values = array(
    'sid' => $sid,
    'nid' => $nid,
    'operation' => $operation,
    'data' => $data,
    'added' => time(),
  );
  drupal_write_record('conglomerateclient_queue', $values);
}

function conglomerateclient_sync_nodes($nodes=array()) {
  if (!empty($nodes)) {
    $placeholders = db_placeholders($nodes);
    $res = db_query("SELECT q.*, i.eid FROM {conglomerateclient_queue} AS q
      INNER JOIN {conglomerateclient_sync_info} AS i ON (i.sid=q.sid AND i.nid=q.nid)
      WHERE q.nid IN({$placeholders}) AND i.in_progress = 0
      ORDER BY q.sid, q.nid, q.added", $nodes);
  }
  else {
    $res = db_query("SELECT q.*, i.eid FROM {conglomerateclient_queue} AS q
      INNER JOIN {conglomerateclient_sync_info} AS i ON (i.sid=q.sid AND i.nid=q.nid)
      WHERE i.in_progress = 0
      ORDER BY q.sid, q.nid, q.added");
  }

  $in_progress = array();
  $sync = array();
  while ($a = db_fetch_array($res)) {
    $sync[$a['sid']][$a['nid']][] = $a;
  }

  // Mark the nodes as in-progress
  foreach ($sync as $sid => $updates) {
    $params = array_keys($updates);
    $placeholders = db_placeholders($params);
    $params = array_merge(array($sid), $params);
    db_query("UPDATE {conglomerateclient_sync_info} SET in_progress = 1
      WHERE sid=%d AND nid IN({$placeholders})", $params);
  }

  // Successful operation ID:s
  $opids = array();
  // Failed operation ID:s
  $fopids = array();

  try {
    // Run through and execute the queued operations
    foreach ($sync as $sid => $updates) {
      foreach ($updates as $nid => $ops) {
        // Remove redundant operations
        _conglomerateclient_compress_node_ops($ops);

        $last_success = FALSE;
        for ($i=0; $i<count($ops); $i++) {
          if ($ops[$i]) {
            $success = _conglomerateclient_perform_operation($ops[$i]);
            if ($success) {
              $opids[] = $ops[$i]['id'];
            }
            else {
              $fopids[] = $ops[$i]['id'];
              break;
            }
          }
        }
      }
    }
  }
  catch (Exception $e) {
    watchdog('conglomerateclient', 'An error occured while pushing updates: [@code] @message', array(
      '@code' => $e->getCode(),
      '@message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
  }

  // Delete the operations that were successful.
  if (!empty($opids)) {
    $placeholders = db_placeholders($opids);
    db_query("DELETE FROM {conglomerateclient_queue}
      WHERE id IN({$placeholders})", $opids);
  }
  // Increas fail count the operations that were unsuccessful.
  if (!empty($fopids)) {
    $placeholders = db_placeholders($fopids);
    db_query("UPDATE {conglomerateclient_queue}
      SET fail_count = fail_count + 1
      WHERE id IN({$placeholders})", $fopids);
  }

  // Mark the nodes as processed
  foreach ($sync as $sid => $updates) {
    $params = array_keys($updates);
    $placeholders = db_placeholders($params);
    $params = array_merge(array($sid), $params);
    db_query("UPDATE {conglomerateclient_sync_info} SET in_progress = 0
      WHERE sid=%d AND nid IN({$placeholders})", $params);
  }
}

/**
 * The task of this function is to remove unnecessary operations. Multiple
 * consequetive updates can be reduced to just the last update. Updates
 * preceding a delete can be skipped altogether.
 *
 * @param array $ops
 * @return void
 */
function _conglomerateclient_compress_node_ops(&$ops) {
  $last_op = FALSE;
  for ($i=0; $i<count($ops); $i++) {
    if ($ops[$i]['operation'] == 'delete' || $ops[$i]['operation'] == 'update') {
      if ($last_op == 'update') {
        $ops[$i-1] = NULL;
      }
    }
    $last_op = $ops[$i]['operation'];
  }
}

/**
 * Gets the view names and display Id's for the views and displays that can be
 * used to determine if a node should be synced.
 *
 * @param string $content_type
 * @return array
 */
function conglomerateclient_sync_views($content_type) {
  $cached = cache_get('conglomerateclient:views:' . $content_type);
  if (FALSE && $cached && $cached->data) {
    $sync_views = $cached->data;
  }
  else {
    $sync_views = array();
    foreach (views_get_all_views() as $view) {
      foreach ($view->display as $display_id => $display) {
        if ($display->display_plugin == 'sync' && $display->display_options['content_type'] == $content_type) {
          $sync_views[$view->name][] = $display_id;
        }
      }
    }
    cache_set('conglomerateclient:views:' . $content_type, $sync_views, 'cache', CACHE_TEMPORARY);
  }

  return $sync_views;
}

/**
 * Filter node through view to determine if and what to synchronize.
 */
function conglomerateclient_evaluate_node($nid) {
  if (!$node = node_load($nid)) return array();
  $result = array();

  $servers = conglomerateclient_get_servers();

  $views = conglomerateclient_sync_views($node->type);
  foreach ($views as $view_name => $displays) {
    $view = views_get_view($view_name);
    if ($view->disabled) {
      continue;
    }
    foreach ($displays as $display_id) {
      $display = $view->display[$display_id];
      $server = $display->display_options['server'];
      // Check that a server has been specified and that it exists
      if (empty($server) || !isset($servers[$server])) {
        continue;
      }

      // We stop executing views for servers that we already have a match for
      if (!isset($result[$server])) {
        $view->execute_display($display_id, array($node->nid));
        $view_result = reset($view->result);

        if ($view_result) {
          $row = array('type' => $display->display_options['server_type']);
          foreach ($display->display_options['fields_mapping'] as $key => $value) {
            $row[$key] = $view->style_plugin->rendered_fields[0][$value];
          }

          // Add the url to the node as default to the url field
          if (empty($row['url'])) {
            $row['url'] = url('node/' . $node->nid, array(
              'absolute' => TRUE,
            ));
          }
          // Add the node language if not set
          if (empty($row['language'])) {
            $row['language'] = $node->language;
          }

          $result[$server] = $row;
        }
      }
    }
  }
  return $result;
}

function _conglomerateclient_perform_operation($op) {
  $data = unserialize($op['data']);

  $result = FALSE;
  $credentials = _conglomerateclient_credentials($op['sid']);

  if ($credentials) {
    $server = $credentials['server'];
    $auth = new RestClientOAuth($credentials['consumer'], $credentials['token'], new OAuthSignatureMethod_HMAC_SHA1());
    $client = new RestClient($auth, new RestClientBaseFormatter());

    try {
      switch ($op['operation']) {
        case 'create':
          $res = $client->post($server['endpoint'] . '/content.php', $data);
          if ($res && isset($res->nid)) {
            db_query("UPDATE {conglomerateclient_sync_info} SET eid = %d
              WHERE sid=%d AND nid = %d", array(
                ':eid' => $res->nid,
                ':sid' => $op['sid'],
                ':nid' => $op['nid'],
              ));
            $result = TRUE;
          }
          break;
        case 'update':
          $res = $client->put($server['endpoint'] . '/content/' . $op['eid'] . '.php', $data);
          $result = $res && isset($res->nid);
          break;
        case 'delete':
          $res = $client->delete($server['endpoint'] . '/content/' . $op['eid'] . '.php', $data);
          if ($res) {
            conglomerateclient_delete_node_sync_info($op['nid'], $op['sid']);
            $result = TRUE;
          }
          break;
      }
    }
    catch (Exception $e) {
      error_log(var_export($e->getMessage(), TRUE));
      $result = FALSE;
    }
  }

  return $result;
}

function _conglomerateclient_credentials($server) {
  static $static_credentials;

  $credentials = FALSE;
  if (!isset($credentials[$server])) {
    $servers = conglomerateclient_get_servers();
    if (isset($servers[$server])) {
      $s = $servers[$server];
      if (!empty($s['oauth_consumer']) && !empty($s['oauth_token_key'])) {
        $consumer = DrupalOAuthConsumerToken::load($s['oauth_consumer']);
        $token = DrupalOAuthToken::load($s['oauth_token_key']);
        if ($consumer && $token) {
          $credentials = array(
            'server' => $s,
            'consumer' => $consumer,
            'token' => $token,
          );
        }
      }
    }
    $static_credentials[$server] = $credentials;
  }
  else {
    $credentials = $static_credentials[$server];
  }

  return $credentials;
}
